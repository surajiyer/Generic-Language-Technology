/*
 * generated by Xtext 2.12.0
 */
package nl.tue.robot.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import nl.tue.robot.ide.contentassist.antlr.internal.InternalRobotParser;
import nl.tue.robot.services.RobotGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RobotParser extends AbstractContentAssistParser {

	@Inject
	private RobotGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRobotParser createParser() {
		InternalRobotParser result = new InternalRobotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getOperatorLiteralAccess().getAlternatives(), "rule__OperatorLiteral__Alternatives");
					put(grammarAccess.getDirectionLiteralAccess().getAlternatives(), "rule__DirectionLiteral__Alternatives");
					put(grammarAccess.getNormalExpressionLiteralAccess().getAlternatives(), "rule__NormalExpressionLiteral__Alternatives");
					put(grammarAccess.getCommandLiteralAccess().getAlternatives(), "rule__CommandLiteral__Alternatives");
					put(grammarAccess.getGridLiteralAccess().getAlternatives(), "rule__GridLiteral__Alternatives");
					put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
					put(grammarAccess.getNegatedExpressionAccess().getGroup(), "rule__NegatedExpression__Group__0");
					put(grammarAccess.getBinaryExpressionAccess().getGroup(), "rule__BinaryExpression__Group__0");
					put(grammarAccess.getHeadingExpressionAccess().getGroup(), "rule__HeadingExpression__Group__0");
					put(grammarAccess.getWallAheadExpressionAccess().getGroup(), "rule__WallAheadExpression__Group__0");
					put(grammarAccess.getNormalExpressionAccess().getGroup(), "rule__NormalExpression__Group__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup(), "rule__RepeatStatement__Group__0");
					put(grammarAccess.getTraceCommandAccess().getGroup(), "rule__TraceCommand__Group__0");
					put(grammarAccess.getAtomicCommandAccess().getGroup(), "rule__AtomicCommand__Group__0");
					put(grammarAccess.getConstructionStatementAccess().getGroup(), "rule__ConstructionStatement__Group__0");
					put(grammarAccess.getScriptAccess().getNameAssignment_2(), "rule__Script__NameAssignment_2");
					put(grammarAccess.getScriptAccess().getCommandAssignment_5(), "rule__Script__CommandAssignment_5");
					put(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionAssignment_2(), "rule__NegatedExpression__NegatedExpressionAssignment_2");
					put(grammarAccess.getBinaryExpressionAccess().getLeftExpressionAssignment_2(), "rule__BinaryExpression__LeftExpressionAssignment_2");
					put(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_3(), "rule__BinaryExpression__OperatorAssignment_3");
					put(grammarAccess.getBinaryExpressionAccess().getRightExpressionAssignment_4(), "rule__BinaryExpression__RightExpressionAssignment_4");
					put(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralAssignment_1(), "rule__HeadingExpression__HeadingLiteralAssignment_1");
					put(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralAssignment_2(), "rule__HeadingExpression__DirectionLiteralAssignment_2");
					put(grammarAccess.getWallAheadExpressionAccess().getWallAssignment_1(), "rule__WallAheadExpression__WallAssignment_1");
					put(grammarAccess.getWallAheadExpressionAccess().getAheadAssignment_2(), "rule__WallAheadExpression__AheadAssignment_2");
					put(grammarAccess.getNormalExpressionAccess().getLiteralAssignment_1(), "rule__NormalExpression__LiteralAssignment_1");
					put(grammarAccess.getCommentAccess().getCommandAssignment_1(), "rule__Comment__CommandAssignment_1");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_2(), "rule__IfStatement__ConditionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getCommandAssignment_4(), "rule__IfStatement__CommandAssignment_4");
					put(grammarAccess.getIfStatementAccess().getCommand2Assignment_5_2(), "rule__IfStatement__Command2Assignment_5_2");
					put(grammarAccess.getWhileStatementAccess().getConditionAssignment_2(), "rule__WhileStatement__ConditionAssignment_2");
					put(grammarAccess.getWhileStatementAccess().getCommandAssignment_4(), "rule__WhileStatement__CommandAssignment_4");
					put(grammarAccess.getRepeatStatementAccess().getConditionAssignment_2(), "rule__RepeatStatement__ConditionAssignment_2");
					put(grammarAccess.getRepeatStatementAccess().getCommandAssignment_4(), "rule__RepeatStatement__CommandAssignment_4");
					put(grammarAccess.getTraceCommandAccess().getCommandAssignment_2(), "rule__TraceCommand__CommandAssignment_2");
					put(grammarAccess.getAtomicCommandAccess().getCommandAssignment_1(), "rule__AtomicCommand__CommandAssignment_1");
					put(grammarAccess.getConstructionStatementAccess().getCommandAssignment_1(), "rule__ConstructionStatement__CommandAssignment_1");
					put(grammarAccess.getConstructionStatementAccess().getXAssignment_4(), "rule__ConstructionStatement__XAssignment_4");
					put(grammarAccess.getConstructionStatementAccess().getYAssignment_7(), "rule__ConstructionStatement__YAssignment_7");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
