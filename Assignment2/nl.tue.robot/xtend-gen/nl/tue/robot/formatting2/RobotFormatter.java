/**
 * generated by Xtext 2.12.0
 */
package nl.tue.robot.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import nl.tue.robot.services.RobotGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import robotmodel.Expression;
import robotmodel.Name;
import robotmodel.NegatedExpression;
import robotmodel.Script;
import robotmodel.Statement;

@SuppressWarnings("all")
public class RobotFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RobotGrammarAccess _robotGrammarAccess;
  
  protected void _format(final Script script, @Extension final IFormattableDocument document) {
    document.<Name>format(script.getName());
    EList<Statement> _command = script.getCommand();
    for (final Statement statement : _command) {
      document.<Statement>format(statement);
    }
  }
  
  protected void _format(final NegatedExpression negatedExpression, @Extension final IFormattableDocument document) {
    document.<Expression>format(negatedExpression.getNegatedExpression());
  }
  
  public void format(final Object negatedExpression, final IFormattableDocument document) {
    if (negatedExpression instanceof XtextResource) {
      _format((XtextResource)negatedExpression, document);
      return;
    } else if (negatedExpression instanceof NegatedExpression) {
      _format((NegatedExpression)negatedExpression, document);
      return;
    } else if (negatedExpression instanceof Script) {
      _format((Script)negatedExpression, document);
      return;
    } else if (negatedExpression instanceof EObject) {
      _format((EObject)negatedExpression, document);
      return;
    } else if (negatedExpression == null) {
      _format((Void)null, document);
      return;
    } else if (negatedExpression != null) {
      _format(negatedExpression, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(negatedExpression, document).toString());
    }
  }
}
