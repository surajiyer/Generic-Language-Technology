/*
 * generated by Xtext 2.12.0
 */
grammar InternalRobot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.robot.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.robot.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.robot.services.RobotGrammarAccess;

}

@parser::members {

 	private RobotGrammarAccess grammarAccess;

    public InternalRobotParser(TokenStream input, RobotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Script";
   	}

   	@Override
   	protected RobotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getScriptAccess().getScriptAction_0(),
					$current);
			}
		)
		otherlv_1='Script'
		{
			newLeafNode(otherlv_1, grammarAccess.getScriptAccess().getScriptKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getScriptAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='runs'
		{
			newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getRunsKeyword_3());
		}
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getScriptAccess().getAsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getCommandStatementParserRuleCall_5_0());
				}
				lv_command_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					add(
						$current,
						"command",
						lv_command_5_0,
						"nl.tue.robot.Robot.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getScriptAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1());
		}
		this_WhileStatement_1=ruleWhileStatement
		{
			$current = $this_WhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRepeatStatementParserRuleCall_2());
		}
		this_RepeatStatement_2=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCommentParserRuleCall_3());
		}
		this_Comment_3=ruleComment
		{
			$current = $this_Comment_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTraceCommandParserRuleCall_4());
		}
		this_TraceCommand_4=ruleTraceCommand
		{
			$current = $this_TraceCommand_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAtomicCommandParserRuleCall_5());
		}
		this_AtomicCommand_5=ruleAtomicCommand
		{
			$current = $this_AtomicCommand_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConstructionStatementParserRuleCall_6());
		}
		this_ConstructionStatement_6=ruleConstructionStatement
		{
			$current = $this_ConstructionStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNegatedExpressionParserRuleCall_0());
		}
		this_NegatedExpression_0=ruleNegatedExpression
		{
			$current = $this_NegatedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall_1());
		}
		this_BinaryExpression_1=ruleBinaryExpression
		{
			$current = $this_BinaryExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getHeadingExpressionParserRuleCall_2());
		}
		this_HeadingExpression_2=ruleHeadingExpression
		{
			$current = $this_HeadingExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getWallAheadExpressionParserRuleCall_3());
		}
		this_WallAheadExpression_3=ruleWallAheadExpression
		{
			$current = $this_WallAheadExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNormalExpressionParserRuleCall_4());
		}
		this_NormalExpression_4=ruleNormalExpression
		{
			$current = $this_NormalExpression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNegatedExpression
entryRuleNegatedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegatedExpressionRule()); }
	iv_ruleNegatedExpression=ruleNegatedExpression
	{ $current=$iv_ruleNegatedExpression.current; }
	EOF;

// Rule NegatedExpression
ruleNegatedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNegatedExpressionAccess().getNegatedExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='not'
		{
			newLeafNode(otherlv_1, grammarAccess.getNegatedExpressionAccess().getNotKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionExpressionParserRuleCall_2_0());
				}
				lv_negatedExpression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegatedExpressionRule());
					}
					set(
						$current,
						"negatedExpression",
						lv_negatedExpression_2_0,
						"nl.tue.robot.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryExpressionRule()); }
	iv_ruleBinaryExpression=ruleBinaryExpression
	{ $current=$iv_ruleBinaryExpression.current; }
	EOF;

// Rule BinaryExpression
ruleBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBinaryExpressionAccess().getBinaryExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBinaryExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryExpressionAccess().getLeftExpressionExpressionParserRuleCall_2_0());
				}
				lv_leftExpression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
					}
					set(
						$current,
						"leftExpression",
						lv_leftExpression_2_0,
						"nl.tue.robot.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryExpressionAccess().getOperatorOperatorLiteralEnumRuleCall_3_0());
				}
				lv_operator_3_0=ruleOperatorLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"nl.tue.robot.Robot.OperatorLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryExpressionAccess().getRightExpressionExpressionParserRuleCall_4_0());
				}
				lv_rightExpression_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
					}
					set(
						$current,
						"rightExpression",
						lv_rightExpression_4_0,
						"nl.tue.robot.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getBinaryExpressionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleHeadingExpression
entryRuleHeadingExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadingExpressionRule()); }
	iv_ruleHeadingExpression=ruleHeadingExpression
	{ $current=$iv_ruleHeadingExpression.current; }
	EOF;

// Rule HeadingExpression
ruleHeadingExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHeadingExpressionAccess().getHeadingExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralHeadingLiteralEnumRuleCall_1_0());
				}
				lv_headingLiteral_1_0=ruleHeadingLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadingExpressionRule());
					}
					set(
						$current,
						"headingLiteral",
						lv_headingLiteral_1_0,
						"nl.tue.robot.Robot.HeadingLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralDirectionLiteralEnumRuleCall_2_0());
				}
				lv_directionLiteral_2_0=ruleDirectionLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadingExpressionRule());
					}
					set(
						$current,
						"directionLiteral",
						lv_directionLiteral_2_0,
						"nl.tue.robot.Robot.DirectionLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWallAheadExpression
entryRuleWallAheadExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWallAheadExpressionRule()); }
	iv_ruleWallAheadExpression=ruleWallAheadExpression
	{ $current=$iv_ruleWallAheadExpression.current; }
	EOF;

// Rule WallAheadExpression
ruleWallAheadExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWallAheadExpressionAccess().getWallAheadExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWallAheadExpressionAccess().getWallWallLiteralEnumRuleCall_1_0());
				}
				lv_wall_1_0=ruleWallLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWallAheadExpressionRule());
					}
					set(
						$current,
						"wall",
						lv_wall_1_0,
						"nl.tue.robot.Robot.WallLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWallAheadExpressionAccess().getAheadAheadLiteralEnumRuleCall_2_0());
				}
				lv_ahead_2_0=ruleAheadLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWallAheadExpressionRule());
					}
					set(
						$current,
						"ahead",
						lv_ahead_2_0,
						"nl.tue.robot.Robot.AheadLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNormalExpression
entryRuleNormalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalExpressionRule()); }
	iv_ruleNormalExpression=ruleNormalExpression
	{ $current=$iv_ruleNormalExpression.current; }
	EOF;

// Rule NormalExpression
ruleNormalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNormalExpressionAccess().getNormalExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNormalExpressionAccess().getLiteralNormalExpressionLiteralEnumRuleCall_1_0());
				}
				lv_literal_1_0=ruleNormalExpressionLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNormalExpressionRule());
					}
					set(
						$current,
						"literal",
						lv_literal_1_0,
						"nl.tue.robot.Robot.NormalExpressionLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current; }
	EOF;

// Rule Comment
ruleComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommentAccess().getCommentAction_0(),
					$current);
			}
		)
		(
			(
				lv_command_1_0=RULE_RL_COMMENT
				{
					newLeafNode(lv_command_1_0, grammarAccess.getCommentAccess().getCommandRL_COMMENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentRule());
					}
					setWithLastConsumed(
						$current,
						"command",
						lv_command_1_0,
						"nl.tue.robot.Robot.RL_COMMENT");
				}
			)
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"nl.tue.robot.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='do'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getCommandStatementParserRuleCall_4_0());
				}
				lv_command_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"command",
						lv_command_4_0,
						"nl.tue.robot.Robot.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
			}
			otherlv_6='do'
			{
				newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getDoKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getCommand2StatementParserRuleCall_5_2_0());
					}
					lv_command2_7_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"command2",
							lv_command2_7_0,
							"nl.tue.robot.Robot.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getIfStatementAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileStatementAccess().getWhileStatementAction_0(),
					$current);
			}
		)
		otherlv_1='while'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"nl.tue.robot.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='do'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getCommandStatementParserRuleCall_4_0());
				}
				lv_command_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					add(
						$current,
						"command",
						lv_command_4_0,
						"nl.tue.robot.Robot.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getWhileStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_ruleRepeatStatement=ruleRepeatStatement
	{ $current=$iv_ruleRepeatStatement.current; }
	EOF;

// Rule RepeatStatement
ruleRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRepeatStatementAccess().getRepeatStatementAction_0(),
					$current);
			}
		)
		otherlv_1='repeat'
		{
			newLeafNode(otherlv_1, grammarAccess.getRepeatStatementAccess().getRepeatKeyword_1());
		}
		(
			(
				lv_condition_2_0=RULE_INT
				{
					newLeafNode(lv_condition_2_0, grammarAccess.getRepeatStatementAccess().getConditionINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRepeatStatementRule());
					}
					setWithLastConsumed(
						$current,
						"condition",
						lv_condition_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='times'
		{
			newLeafNode(otherlv_3, grammarAccess.getRepeatStatementAccess().getTimesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getCommandStatementParserRuleCall_4_0());
				}
				lv_command_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					add(
						$current,
						"command",
						lv_command_4_0,
						"nl.tue.robot.Robot.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getRepeatStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleTraceCommand
entryRuleTraceCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceCommandRule()); }
	iv_ruleTraceCommand=ruleTraceCommand
	{ $current=$iv_ruleTraceCommand.current; }
	EOF;

// Rule TraceCommand
ruleTraceCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTraceCommandAccess().getTraceCommandAction_0(),
					$current);
			}
		)
		otherlv_1='trace'
		{
			newLeafNode(otherlv_1, grammarAccess.getTraceCommandAccess().getTraceKeyword_1());
		}
		(
			(
				lv_command_2_0=RULE_STRING
				{
					newLeafNode(lv_command_2_0, grammarAccess.getTraceCommandAccess().getCommandSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceCommandRule());
					}
					setWithLastConsumed(
						$current,
						"command",
						lv_command_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAtomicCommand
entryRuleAtomicCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicCommandRule()); }
	iv_ruleAtomicCommand=ruleAtomicCommand
	{ $current=$iv_ruleAtomicCommand.current; }
	EOF;

// Rule AtomicCommand
ruleAtomicCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAtomicCommandAccess().getAtomicCommandAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomicCommandAccess().getCommandCommandLiteralEnumRuleCall_1_0());
				}
				lv_command_1_0=ruleCommandLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomicCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_1_0,
						"nl.tue.robot.Robot.CommandLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstructionStatement
entryRuleConstructionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructionStatementRule()); }
	iv_ruleConstructionStatement=ruleConstructionStatement
	{ $current=$iv_ruleConstructionStatement.current; }
	EOF;

// Rule ConstructionStatement
ruleConstructionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstructionStatementAccess().getConstructionStatementAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructionStatementAccess().getCommandGridLiteralEnumRuleCall_1_0());
				}
				lv_command_1_0=ruleGridLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructionStatementRule());
					}
					set(
						$current,
						"command",
						lv_command_1_0,
						"nl.tue.robot.Robot.GridLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='at'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstructionStatementAccess().getAtKeyword_2());
		}
		otherlv_3='row:'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstructionStatementAccess().getRowKeyword_3());
		}
		(
			(
				lv_x_4_0=RULE_INT
				{
					newLeafNode(lv_x_4_0, grammarAccess.getConstructionStatementAccess().getXINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstructionStatementRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getConstructionStatementAccess().getCommaKeyword_5());
		}
		otherlv_6='col:'
		{
			newLeafNode(otherlv_6, grammarAccess.getConstructionStatementAccess().getColKeyword_6());
		}
		(
			(
				lv_y_7_0=RULE_INT
				{
					newLeafNode(lv_y_7_0, grammarAccess.getConstructionStatementAccess().getYINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstructionStatementRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule OperatorLiteral
ruleOperatorLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='and'
			{
				$current = grammarAccess.getOperatorLiteralAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorLiteralAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='or'
			{
				$current = grammarAccess.getOperatorLiteralAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorLiteralAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule HeadingLiteral
ruleHeadingLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='heading'
		{
			$current = grammarAccess.getHeadingLiteralAccess().getHeadingEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getHeadingLiteralAccess().getHeadingEnumLiteralDeclaration());
		}
	)
;

// Rule DirectionLiteral
ruleDirectionLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='north'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getNorthEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionLiteralAccess().getNorthEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='south'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getSouthEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionLiteralAccess().getSouthEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='east'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getEastEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionLiteralAccess().getEastEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='west'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getWestEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionLiteralAccess().getWestEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule WallLiteral
ruleWallLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='wall'
		{
			$current = grammarAccess.getWallLiteralAccess().getWallEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getWallLiteralAccess().getWallEnumLiteralDeclaration());
		}
	)
;

// Rule AheadLiteral
ruleAheadLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='ahead'
		{
			$current = grammarAccess.getAheadLiteralAccess().getAheadEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAheadLiteralAccess().getAheadEnumLiteralDeclaration());
		}
	)
;

// Rule NormalExpressionLiteral
ruleNormalExpressionLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='full'
			{
				$current = grammarAccess.getNormalExpressionLiteralAccess().getFullEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNormalExpressionLiteralAccess().getFullEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='mark'
			{
				$current = grammarAccess.getNormalExpressionLiteralAccess().getMarkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNormalExpressionLiteralAccess().getMarkEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CommandLiteral
ruleCommandLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='step'
			{
				$current = grammarAccess.getCommandLiteralAccess().getStepEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCommandLiteralAccess().getStepEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='turnLeft'
			{
				$current = grammarAccess.getCommandLiteralAccess().getTurnLeftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCommandLiteralAccess().getTurnLeftEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='drop'
			{
				$current = grammarAccess.getCommandLiteralAccess().getDropEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCommandLiteralAccess().getDropEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='pick'
			{
				$current = grammarAccess.getCommandLiteralAccess().getPickEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCommandLiteralAccess().getPickEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule GridLiteral
ruleGridLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='buildWall'
			{
				$current = grammarAccess.getGridLiteralAccess().getBuildWallEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getGridLiteralAccess().getBuildWallEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='destroyWall'
			{
				$current = grammarAccess.getGridLiteralAccess().getDestroyWallEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getGridLiteralAccess().getDestroyWallEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='pickMark'
			{
				$current = grammarAccess.getGridLiteralAccess().getPickMarkEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getGridLiteralAccess().getPickMarkEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='dropMark'
			{
				$current = grammarAccess.getGridLiteralAccess().getDropMarkEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getGridLiteralAccess().getDropMarkEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_RL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
