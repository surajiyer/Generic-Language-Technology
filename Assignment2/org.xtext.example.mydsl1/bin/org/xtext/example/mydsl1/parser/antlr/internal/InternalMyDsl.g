/*
 * generated by Xtext 2.11.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Script";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Script'
		{
			newLeafNode(otherlv_0, grammarAccess.getScriptAccess().getScriptKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getNameNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl1.MyDsl.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='runs'
		{
			newLeafNode(otherlv_2, grammarAccess.getScriptAccess().getRunsKeyword_2());
		}
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getAsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"org.xtext.example.mydsl1.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getScriptAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1());
		}
		this_WhileStatement_1=ruleWhileStatement
		{
			$current = $this_WhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRepeatStatementParserRuleCall_2());
		}
		this_RepeatStatement_2=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCommentParserRuleCall_3());
		}
		this_Comment_3=ruleComment
		{
			$current = $this_Comment_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTraceCommandParserRuleCall_4());
		}
		this_TraceCommand_4=ruleTraceCommand
		{
			$current = $this_TraceCommand_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAtomicCommandParserRuleCall_5());
		}
		this_AtomicCommand_5=ruleAtomicCommand
		{
			$current = $this_AtomicCommand_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConstructionStatementParserRuleCall_6());
		}
		this_ConstructionStatement_6=ruleConstructionStatement
		{
			$current = $this_ConstructionStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNegatedExpressionParserRuleCall_0());
		}
		this_NegatedExpression_0=ruleNegatedExpression
		{
			$current = $this_NegatedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall_1());
		}
		this_BinaryExpression_1=ruleBinaryExpression
		{
			$current = $this_BinaryExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getHeadingExpressionParserRuleCall_2());
		}
		this_HeadingExpression_2=ruleHeadingExpression
		{
			$current = $this_HeadingExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getWallAheadExpressionParserRuleCall_3());
		}
		this_WallAheadExpression_3=ruleWallAheadExpression
		{
			$current = $this_WallAheadExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNormalExpressionParserRuleCall_4());
		}
		this_NormalExpression_4=ruleNormalExpression
		{
			$current = $this_NormalExpression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNameAccess().getNameAction_0(),
					$current);
			}
		)
		this_ID_1=RULE_ID
		{
			newLeafNode(this_ID_1, grammarAccess.getNameAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getIfExpressionExpressionParserRuleCall_1_0());
				}
				lv_ifExpression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"ifExpression",
						lv_ifExpression_1_0,
						"org.xtext.example.mydsl1.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtext.example.mydsl1.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getElseKeyword_4_0());
			}
			otherlv_5='do'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getDoKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getStatements2StatementParserRuleCall_4_2_0());
					}
					lv_statements2_6_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"statements2",
							lv_statements2_6_0,
							"org.xtext.example.mydsl1.MyDsl.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getWhileExpressionExpressionParserRuleCall_1_0());
				}
				lv_whileExpression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"whileExpression",
						lv_whileExpression_1_0,
						"org.xtext.example.mydsl1.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtext.example.mydsl1.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_ruleRepeatStatement=ruleRepeatStatement
	{ $current=$iv_ruleRepeatStatement.current; }
	EOF;

// Rule RepeatStatement
ruleRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatStatementAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getIntegerIntegerParserRuleCall_1_0());
				}
				lv_integer_1_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"integer",
						lv_integer_1_0,
						"org.xtext.example.mydsl1.MyDsl.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='times'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatStatementAccess().getTimesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtext.example.mydsl1.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getRepeatStatementAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current; }
	EOF;

// Rule Comment
ruleComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommentAccess().getCommentAction_0(),
					$current);
			}
		)
		otherlv_1='Comment'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommentAccess().getCommentKeyword_1());
		}
	)
;

// Entry rule entryRuleTraceCommand
entryRuleTraceCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceCommandRule()); }
	iv_ruleTraceCommand=ruleTraceCommand
	{ $current=$iv_ruleTraceCommand.current; }
	EOF;

// Rule TraceCommand
ruleTraceCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='trace'
		{
			newLeafNode(otherlv_0, grammarAccess.getTraceCommandAccess().getTraceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceCommandAccess().getStringStringExpressionParserRuleCall_1_0());
				}
				lv_string_1_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceCommandRule());
					}
					set(
						$current,
						"string",
						lv_string_1_0,
						"org.xtext.example.mydsl1.MyDsl.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtomicCommand
entryRuleAtomicCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicCommandRule()); }
	iv_ruleAtomicCommand=ruleAtomicCommand
	{ $current=$iv_ruleAtomicCommand.current; }
	EOF;

// Rule AtomicCommand
ruleAtomicCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAtomicCommandAccess().getLiteralCommandLiteralEnumRuleCall_0());
			}
			lv_literal_0_0=ruleCommandLiteral
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAtomicCommandRule());
				}
				set(
					$current,
					"literal",
					lv_literal_0_0,
					"org.xtext.example.mydsl1.MyDsl.CommandLiteral");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleConstructionStatement
entryRuleConstructionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructionStatementRule()); }
	iv_ruleConstructionStatement=ruleConstructionStatement
	{ $current=$iv_ruleConstructionStatement.current; }
	EOF;

// Rule ConstructionStatement
ruleConstructionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructionStatementAccess().getCommandGridLiteralEnumRuleCall_0_0());
				}
				lv_command_0_0=ruleGridLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructionStatementRule());
					}
					set(
						$current,
						"command",
						lv_command_0_0,
						"org.xtext.example.mydsl1.MyDsl.GridLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstructionStatementAccess().getAtKeyword_1());
		}
		otherlv_2='row:'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstructionStatementAccess().getRowKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructionStatementAccess().getIntegersIntegerParserRuleCall_3_0());
				}
				lv_integers_3_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructionStatementRule());
					}
					add(
						$current,
						"integers",
						lv_integers_3_0,
						"org.xtext.example.mydsl1.MyDsl.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getConstructionStatementAccess().getCommaKeyword_4());
		}
		otherlv_5='col:'
		{
			newLeafNode(otherlv_5, grammarAccess.getConstructionStatementAccess().getColKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructionStatementAccess().getIntegersIntegerParserRuleCall_6_0());
				}
				lv_integers_6_0=ruleInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructionStatementRule());
					}
					add(
						$current,
						"integers",
						lv_integers_6_0,
						"org.xtext.example.mydsl1.MyDsl.Integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNegatedExpression
entryRuleNegatedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegatedExpressionRule()); }
	iv_ruleNegatedExpression=ruleNegatedExpression
	{ $current=$iv_ruleNegatedExpression.current; }
	EOF;

// Rule NegatedExpression
ruleNegatedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNegatedExpressionAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionExpressionParserRuleCall_1_0());
				}
				lv_negatedExpression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegatedExpressionRule());
					}
					set(
						$current,
						"negatedExpression",
						lv_negatedExpression_1_0,
						"org.xtext.example.mydsl1.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryExpressionRule()); }
	iv_ruleBinaryExpression=ruleBinaryExpression
	{ $current=$iv_ruleBinaryExpression.current; }
	EOF;

// Rule BinaryExpression
ruleBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBinaryExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryExpressionAccess().getLeftExpressionExpressionParserRuleCall_1_0());
				}
				lv_leftExpression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
					}
					set(
						$current,
						"leftExpression",
						lv_leftExpression_1_0,
						"org.xtext.example.mydsl1.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryExpressionAccess().getOperatorOperatorLiteralEnumRuleCall_2_0());
				}
				lv_operator_2_0=ruleOperatorLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"org.xtext.example.mydsl1.MyDsl.OperatorLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryExpressionAccess().getRightExpressionExpressionParserRuleCall_3_0());
				}
				lv_rightExpression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
					}
					set(
						$current,
						"rightExpression",
						lv_rightExpression_3_0,
						"org.xtext.example.mydsl1.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinaryExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleHeadingExpression
entryRuleHeadingExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadingExpressionRule()); }
	iv_ruleHeadingExpression=ruleHeadingExpression
	{ $current=$iv_ruleHeadingExpression.current; }
	EOF;

// Rule HeadingExpression
ruleHeadingExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralHeadingLiteralEnumRuleCall_0_0());
				}
				lv_headingLiteral_0_0=ruleHeadingLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadingExpressionRule());
					}
					set(
						$current,
						"headingLiteral",
						lv_headingLiteral_0_0,
						"org.xtext.example.mydsl1.MyDsl.HeadingLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralDirectionLiteralEnumRuleCall_1_0());
				}
				lv_directionLiteral_1_0=ruleDirectionLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadingExpressionRule());
					}
					set(
						$current,
						"directionLiteral",
						lv_directionLiteral_1_0,
						"org.xtext.example.mydsl1.MyDsl.DirectionLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWallAheadExpression
entryRuleWallAheadExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWallAheadExpressionRule()); }
	iv_ruleWallAheadExpression=ruleWallAheadExpression
	{ $current=$iv_ruleWallAheadExpression.current; }
	EOF;

// Rule WallAheadExpression
ruleWallAheadExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWallAheadExpressionAccess().getWallWallLiteralEnumRuleCall_0_0());
				}
				lv_wall_0_0=ruleWallLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWallAheadExpressionRule());
					}
					set(
						$current,
						"wall",
						lv_wall_0_0,
						"org.xtext.example.mydsl1.MyDsl.WallLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWallAheadExpressionAccess().getAheadAheadLiteralEnumRuleCall_1_0());
				}
				lv_ahead_1_0=ruleAheadLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWallAheadExpressionRule());
					}
					set(
						$current,
						"ahead",
						lv_ahead_1_0,
						"org.xtext.example.mydsl1.MyDsl.AheadLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNormalExpression
entryRuleNormalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalExpressionRule()); }
	iv_ruleNormalExpression=ruleNormalExpression
	{ $current=$iv_ruleNormalExpression.current; }
	EOF;

// Rule NormalExpression
ruleNormalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNormalExpressionAccess().getLiteralNormalExpressionLiteralEnumRuleCall_0());
			}
			lv_literal_0_0=ruleNormalExpressionLiteral
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNormalExpressionRule());
				}
				set(
					$current,
					"literal",
					lv_literal_0_0,
					"org.xtext.example.mydsl1.MyDsl.NormalExpressionLiteral");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current; }
	EOF;

// Rule Integer
ruleInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerAccess().getIntegerAction_0(),
					$current);
			}
		)
		this_INT_1=RULE_INT
		{
			newLeafNode(this_INT_1, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	iv_ruleStringExpression=ruleStringExpression
	{ $current=$iv_ruleStringExpression.current; }
	EOF;

// Rule StringExpression
ruleStringExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringExpressionAccess().getStringExpressionAction_0(),
					$current);
			}
		)
		this_STRING_1=RULE_STRING
		{
			newLeafNode(this_STRING_1, grammarAccess.getStringExpressionAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Rule OperatorLiteral
ruleOperatorLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='and'
			{
				$current = grammarAccess.getOperatorLiteralAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorLiteralAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='or'
			{
				$current = grammarAccess.getOperatorLiteralAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorLiteralAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule HeadingLiteral
ruleHeadingLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='heading'
		{
			$current = grammarAccess.getHeadingLiteralAccess().getHeadingEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getHeadingLiteralAccess().getHeadingEnumLiteralDeclaration());
		}
	)
;

// Rule DirectionLiteral
ruleDirectionLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='north'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getNorthEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionLiteralAccess().getNorthEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='south'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getSouthEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionLiteralAccess().getSouthEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='east'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getEastEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionLiteralAccess().getEastEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='west'
			{
				$current = grammarAccess.getDirectionLiteralAccess().getWestEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionLiteralAccess().getWestEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule WallLiteral
ruleWallLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='wall'
		{
			$current = grammarAccess.getWallLiteralAccess().getWallEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getWallLiteralAccess().getWallEnumLiteralDeclaration());
		}
	)
;

// Rule AheadLiteral
ruleAheadLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='ahead'
		{
			$current = grammarAccess.getAheadLiteralAccess().getAheadEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAheadLiteralAccess().getAheadEnumLiteralDeclaration());
		}
	)
;

// Rule NormalExpressionLiteral
ruleNormalExpressionLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='full'
			{
				$current = grammarAccess.getNormalExpressionLiteralAccess().getFullEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNormalExpressionLiteralAccess().getFullEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='mark'
			{
				$current = grammarAccess.getNormalExpressionLiteralAccess().getMarkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNormalExpressionLiteralAccess().getMarkEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CommandLiteral
ruleCommandLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='step'
			{
				$current = grammarAccess.getCommandLiteralAccess().getStepEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCommandLiteralAccess().getStepEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='turnLeft'
			{
				$current = grammarAccess.getCommandLiteralAccess().getTurnLeftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCommandLiteralAccess().getTurnLeftEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='drop'
			{
				$current = grammarAccess.getCommandLiteralAccess().getDropEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCommandLiteralAccess().getDropEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='pick'
			{
				$current = grammarAccess.getCommandLiteralAccess().getPickEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCommandLiteralAccess().getPickEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule GridLiteral
ruleGridLiteral returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='buildWall'
			{
				$current = grammarAccess.getGridLiteralAccess().getBuildWallEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getGridLiteralAccess().getBuildWallEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='destroyWall'
			{
				$current = grammarAccess.getGridLiteralAccess().getDestroyWallEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getGridLiteralAccess().getDestroyWallEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='pickMark'
			{
				$current = grammarAccess.getGridLiteralAccess().getPickMarkEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getGridLiteralAccess().getPickMarkEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='dropMark'
			{
				$current = grammarAccess.getGridLiteralAccess().getDropMarkEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getGridLiteralAccess().getDropMarkEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
