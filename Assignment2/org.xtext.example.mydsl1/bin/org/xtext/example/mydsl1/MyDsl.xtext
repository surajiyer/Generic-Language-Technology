// automatically generated by Xtext
grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

import "plugin://glt.robot" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Script returns Script:
	'Script' name=Name
		'runs' 'as'			
		statements+=Statement*
	'end';


Statement returns Statement:
	IfStatement | WhileStatement | RepeatStatement | Comment | TraceCommand | AtomicCommand | ConstructionStatement;

Expression returns Expression:
	NegatedExpression | BinaryExpression | HeadingExpression | WallAheadExpression | NormalExpression;



Name returns Name:
	{Name}
	ID
	;

IfStatement returns IfStatement:
	'if'
		ifExpression=Expression 'do'
		statements+=Statement*
		('else' 'do' statements2+=Statement*)?
	'end';

WhileStatement returns WhileStatement:
	'while'
		whileExpression=Expression 'do'
		statements+=Statement*
	'end';

RepeatStatement returns RepeatStatement:
	'repeat' integer=Integer 'times'
		statements+=Statement*
	'end';

Comment returns Comment:
	{Comment}
	'Comment'
	;

TraceCommand returns TraceCommand:
	'trace' string=StringExpression
	;

AtomicCommand returns AtomicCommand:
	literal=CommandLiteral
	;

ConstructionStatement returns ConstructionStatement:
	command=GridLiteral
		'at' 'row:' integers+=Integer "," 'col:' integers+=Integer 
	;

NegatedExpression returns NegatedExpression:
	'not' negatedExpression=Expression
	;

BinaryExpression returns BinaryExpression:
	'(' leftExpression=Expression operator=OperatorLiteral rightExpression=Expression ')'
	;

HeadingExpression returns HeadingExpression:
	headingLiteral=HeadingLiteral
	directionLiteral=DirectionLiteral
	;

WallAheadExpression returns WallAheadExpression:
	wall=WallLiteral
	ahead=AheadLiteral
	;

NormalExpression returns NormalExpression:
	literal=NormalExpressionLiteral
	;

enum OperatorLiteral returns OperatorLiteral:
				and = 'and' | or = 'or';

enum HeadingLiteral returns HeadingLiteral:
				heading = 'heading';

enum DirectionLiteral returns DirectionLiteral:
				north = 'north' | south = 'south' | east = 'east' | west = 'west';

enum WallLiteral returns WallLiteral:
				wall = 'wall';

enum AheadLiteral returns AheadLiteral:
				ahead = 'ahead';

enum NormalExpressionLiteral returns NormalExpressionLiteral:
				full = 'full' | mark = 'mark';

Integer returns Integer:
	{Integer}
	INT
	;

enum TraceLiteral returns TraceLiteral:
				trace = 'trace';

StringExpression returns StringExpression:
	{StringExpression}
	STRING
	;

enum CommandLiteral returns CommandLiteral:
				step = 'step' | turnLeft = 'turnLeft' | drop = 'drop' | pick = 'pick';

enum GridLiteral returns GridLiteral:
				buildWall = 'buildWall' | destroyWall = 'destroyWall' | pickMark = 'pickMark' | dropMark = 'dropMark';
