/*
 * generated by Xtext 2.11.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleScript
entryRuleScript
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptAccess().getGroup()); }
		(rule__Script__Group__0)
		{ after(grammarAccess.getScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleName
entryRuleName
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameAccess().getGroup()); }
		(rule__Name__Group__0)
		{ after(grammarAccess.getNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement
:
{ before(grammarAccess.getRepeatStatementRule()); }
	 ruleRepeatStatement
{ after(grammarAccess.getRepeatStatementRule()); } 
	 EOF 
;

// Rule RepeatStatement
ruleRepeatStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getGroup()); }
		(rule__RepeatStatement__Group__0)
		{ after(grammarAccess.getRepeatStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComment
entryRuleComment
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommentAccess().getGroup()); }
		(rule__Comment__Group__0)
		{ after(grammarAccess.getCommentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTraceCommand
entryRuleTraceCommand
:
{ before(grammarAccess.getTraceCommandRule()); }
	 ruleTraceCommand
{ after(grammarAccess.getTraceCommandRule()); } 
	 EOF 
;

// Rule TraceCommand
ruleTraceCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraceCommandAccess().getGroup()); }
		(rule__TraceCommand__Group__0)
		{ after(grammarAccess.getTraceCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicCommand
entryRuleAtomicCommand
:
{ before(grammarAccess.getAtomicCommandRule()); }
	 ruleAtomicCommand
{ after(grammarAccess.getAtomicCommandRule()); } 
	 EOF 
;

// Rule AtomicCommand
ruleAtomicCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicCommandAccess().getLiteralAssignment()); }
		(rule__AtomicCommand__LiteralAssignment)
		{ after(grammarAccess.getAtomicCommandAccess().getLiteralAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstructionStatement
entryRuleConstructionStatement
:
{ before(grammarAccess.getConstructionStatementRule()); }
	 ruleConstructionStatement
{ after(grammarAccess.getConstructionStatementRule()); } 
	 EOF 
;

// Rule ConstructionStatement
ruleConstructionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructionStatementAccess().getGroup()); }
		(rule__ConstructionStatement__Group__0)
		{ after(grammarAccess.getConstructionStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegatedExpression
entryRuleNegatedExpression
:
{ before(grammarAccess.getNegatedExpressionRule()); }
	 ruleNegatedExpression
{ after(grammarAccess.getNegatedExpressionRule()); } 
	 EOF 
;

// Rule NegatedExpression
ruleNegatedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegatedExpressionAccess().getGroup()); }
		(rule__NegatedExpression__Group__0)
		{ after(grammarAccess.getNegatedExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression
:
{ before(grammarAccess.getBinaryExpressionRule()); }
	 ruleBinaryExpression
{ after(grammarAccess.getBinaryExpressionRule()); } 
	 EOF 
;

// Rule BinaryExpression
ruleBinaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getGroup()); }
		(rule__BinaryExpression__Group__0)
		{ after(grammarAccess.getBinaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeadingExpression
entryRuleHeadingExpression
:
{ before(grammarAccess.getHeadingExpressionRule()); }
	 ruleHeadingExpression
{ after(grammarAccess.getHeadingExpressionRule()); } 
	 EOF 
;

// Rule HeadingExpression
ruleHeadingExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadingExpressionAccess().getGroup()); }
		(rule__HeadingExpression__Group__0)
		{ after(grammarAccess.getHeadingExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWallAheadExpression
entryRuleWallAheadExpression
:
{ before(grammarAccess.getWallAheadExpressionRule()); }
	 ruleWallAheadExpression
{ after(grammarAccess.getWallAheadExpressionRule()); } 
	 EOF 
;

// Rule WallAheadExpression
ruleWallAheadExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWallAheadExpressionAccess().getGroup()); }
		(rule__WallAheadExpression__Group__0)
		{ after(grammarAccess.getWallAheadExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNormalExpression
entryRuleNormalExpression
:
{ before(grammarAccess.getNormalExpressionRule()); }
	 ruleNormalExpression
{ after(grammarAccess.getNormalExpressionRule()); } 
	 EOF 
;

// Rule NormalExpression
ruleNormalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNormalExpressionAccess().getLiteralAssignment()); }
		(rule__NormalExpression__LiteralAssignment)
		{ after(grammarAccess.getNormalExpressionAccess().getLiteralAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteger
entryRuleInteger
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerAccess().getGroup()); }
		(rule__Integer__Group__0)
		{ after(grammarAccess.getIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getGroup()); }
		(rule__StringExpression__Group__0)
		{ after(grammarAccess.getStringExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OperatorLiteral
ruleOperatorLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorLiteralAccess().getAlternatives()); }
		(rule__OperatorLiteral__Alternatives)
		{ after(grammarAccess.getOperatorLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule HeadingLiteral
ruleHeadingLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadingLiteralAccess().getHeadingEnumLiteralDeclaration()); }
		('heading')
		{ after(grammarAccess.getHeadingLiteralAccess().getHeadingEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DirectionLiteral
ruleDirectionLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionLiteralAccess().getAlternatives()); }
		(rule__DirectionLiteral__Alternatives)
		{ after(grammarAccess.getDirectionLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule WallLiteral
ruleWallLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallLiteralAccess().getWallEnumLiteralDeclaration()); }
		('wall')
		{ after(grammarAccess.getWallLiteralAccess().getWallEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AheadLiteral
ruleAheadLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAheadLiteralAccess().getAheadEnumLiteralDeclaration()); }
		('ahead')
		{ after(grammarAccess.getAheadLiteralAccess().getAheadEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule NormalExpressionLiteral
ruleNormalExpressionLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNormalExpressionLiteralAccess().getAlternatives()); }
		(rule__NormalExpressionLiteral__Alternatives)
		{ after(grammarAccess.getNormalExpressionLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CommandLiteral
ruleCommandLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandLiteralAccess().getAlternatives()); }
		(rule__CommandLiteral__Alternatives)
		{ after(grammarAccess.getCommandLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule GridLiteral
ruleGridLiteral
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridLiteralAccess().getAlternatives()); }
		(rule__GridLiteral__Alternatives)
		{ after(grammarAccess.getGridLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); }
		ruleIfStatement
		{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1()); }
		ruleWhileStatement
		{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRepeatStatementParserRuleCall_2()); }
		ruleRepeatStatement
		{ after(grammarAccess.getStatementAccess().getRepeatStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getCommentParserRuleCall_3()); }
		ruleComment
		{ after(grammarAccess.getStatementAccess().getCommentParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTraceCommandParserRuleCall_4()); }
		ruleTraceCommand
		{ after(grammarAccess.getStatementAccess().getTraceCommandParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAtomicCommandParserRuleCall_5()); }
		ruleAtomicCommand
		{ after(grammarAccess.getStatementAccess().getAtomicCommandParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConstructionStatementParserRuleCall_6()); }
		ruleConstructionStatement
		{ after(grammarAccess.getStatementAccess().getConstructionStatementParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNegatedExpressionParserRuleCall_0()); }
		ruleNegatedExpression
		{ after(grammarAccess.getExpressionAccess().getNegatedExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall_1()); }
		ruleBinaryExpression
		{ after(grammarAccess.getExpressionAccess().getBinaryExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getHeadingExpressionParserRuleCall_2()); }
		ruleHeadingExpression
		{ after(grammarAccess.getExpressionAccess().getHeadingExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getWallAheadExpressionParserRuleCall_3()); }
		ruleWallAheadExpression
		{ after(grammarAccess.getExpressionAccess().getWallAheadExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNormalExpressionParserRuleCall_4()); }
		ruleNormalExpression
		{ after(grammarAccess.getExpressionAccess().getNormalExpressionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorLiteralAccess().getAndEnumLiteralDeclaration_0()); }
		('and')
		{ after(grammarAccess.getOperatorLiteralAccess().getAndEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorLiteralAccess().getOrEnumLiteralDeclaration_1()); }
		('or')
		{ after(grammarAccess.getOperatorLiteralAccess().getOrEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectionLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionLiteralAccess().getNorthEnumLiteralDeclaration_0()); }
		('north')
		{ after(grammarAccess.getDirectionLiteralAccess().getNorthEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionLiteralAccess().getSouthEnumLiteralDeclaration_1()); }
		('south')
		{ after(grammarAccess.getDirectionLiteralAccess().getSouthEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionLiteralAccess().getEastEnumLiteralDeclaration_2()); }
		('east')
		{ after(grammarAccess.getDirectionLiteralAccess().getEastEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionLiteralAccess().getWestEnumLiteralDeclaration_3()); }
		('west')
		{ after(grammarAccess.getDirectionLiteralAccess().getWestEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalExpressionLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNormalExpressionLiteralAccess().getFullEnumLiteralDeclaration_0()); }
		('full')
		{ after(grammarAccess.getNormalExpressionLiteralAccess().getFullEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getNormalExpressionLiteralAccess().getMarkEnumLiteralDeclaration_1()); }
		('mark')
		{ after(grammarAccess.getNormalExpressionLiteralAccess().getMarkEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandLiteralAccess().getStepEnumLiteralDeclaration_0()); }
		('step')
		{ after(grammarAccess.getCommandLiteralAccess().getStepEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandLiteralAccess().getTurnLeftEnumLiteralDeclaration_1()); }
		('turnLeft')
		{ after(grammarAccess.getCommandLiteralAccess().getTurnLeftEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandLiteralAccess().getDropEnumLiteralDeclaration_2()); }
		('drop')
		{ after(grammarAccess.getCommandLiteralAccess().getDropEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandLiteralAccess().getPickEnumLiteralDeclaration_3()); }
		('pick')
		{ after(grammarAccess.getCommandLiteralAccess().getPickEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GridLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridLiteralAccess().getBuildWallEnumLiteralDeclaration_0()); }
		('buildWall')
		{ after(grammarAccess.getGridLiteralAccess().getBuildWallEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getGridLiteralAccess().getDestroyWallEnumLiteralDeclaration_1()); }
		('destroyWall')
		{ after(grammarAccess.getGridLiteralAccess().getDestroyWallEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getGridLiteralAccess().getPickMarkEnumLiteralDeclaration_2()); }
		('pickMark')
		{ after(grammarAccess.getGridLiteralAccess().getPickMarkEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getGridLiteralAccess().getDropMarkEnumLiteralDeclaration_3()); }
		('dropMark')
		{ after(grammarAccess.getGridLiteralAccess().getDropMarkEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getScriptKeyword_0()); }
	'Script'
	{ after(grammarAccess.getScriptAccess().getScriptKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getNameAssignment_1()); }
	(rule__Script__NameAssignment_1)
	{ after(grammarAccess.getScriptAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__2__Impl
	rule__Script__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getRunsKeyword_2()); }
	'runs'
	{ after(grammarAccess.getScriptAccess().getRunsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__3__Impl
	rule__Script__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getAsKeyword_3()); }
	'as'
	{ after(grammarAccess.getScriptAccess().getAsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__4__Impl
	rule__Script__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getStatementsAssignment_4()); }
	(rule__Script__StatementsAssignment_4)*
	{ after(grammarAccess.getScriptAccess().getStatementsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getScriptAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Name__Group__0__Impl
	rule__Name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameAccess().getNameAction_0()); }
	()
	{ after(grammarAccess.getNameAccess().getNameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Name__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getNameAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfExpressionAssignment_1()); }
	(rule__IfStatement__IfExpressionAssignment_1)
	{ after(grammarAccess.getIfStatementAccess().getIfExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getIfStatementAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getStatementsAssignment_3()); }
	(rule__IfStatement__StatementsAssignment_3)*
	{ after(grammarAccess.getIfStatementAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_4()); }
	(rule__IfStatement__Group_4__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getIfStatementAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__0__Impl
	rule__IfStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__1__Impl
	rule__IfStatement__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getDoKeyword_4_1()); }
	'do'
	{ after(grammarAccess.getIfStatementAccess().getDoKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getStatements2Assignment_4_2()); }
	(rule__IfStatement__Statements2Assignment_4_2)*
	{ after(grammarAccess.getIfStatementAccess().getStatements2Assignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileExpressionAssignment_1()); }
	(rule__WhileStatement__WhileExpressionAssignment_1)
	{ after(grammarAccess.getWhileStatementAccess().getWhileExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getWhileStatementAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getStatementsAssignment_3()); }
	(rule__WhileStatement__StatementsAssignment_3)*
	{ after(grammarAccess.getWhileStatementAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getWhileStatementAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__0__Impl
	rule__RepeatStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getRepeatKeyword_0()); }
	'repeat'
	{ after(grammarAccess.getRepeatStatementAccess().getRepeatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__1__Impl
	rule__RepeatStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getIntegerAssignment_1()); }
	(rule__RepeatStatement__IntegerAssignment_1)
	{ after(grammarAccess.getRepeatStatementAccess().getIntegerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__2__Impl
	rule__RepeatStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getTimesKeyword_2()); }
	'times'
	{ after(grammarAccess.getRepeatStatementAccess().getTimesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__3__Impl
	rule__RepeatStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getStatementsAssignment_3()); }
	(rule__RepeatStatement__StatementsAssignment_3)*
	{ after(grammarAccess.getRepeatStatementAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getRepeatStatementAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comment__Group__0__Impl
	rule__Comment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentAccess().getCommentAction_0()); }
	()
	{ after(grammarAccess.getCommentAccess().getCommentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentAccess().getCommentKeyword_1()); }
	'Comment'
	{ after(grammarAccess.getCommentAccess().getCommentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TraceCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceCommand__Group__0__Impl
	rule__TraceCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceCommandAccess().getTraceKeyword_0()); }
	'trace'
	{ after(grammarAccess.getTraceCommandAccess().getTraceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceCommandAccess().getStringAssignment_1()); }
	(rule__TraceCommand__StringAssignment_1)
	{ after(grammarAccess.getTraceCommandAccess().getStringAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructionStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__0__Impl
	rule__ConstructionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getCommandAssignment_0()); }
	(rule__ConstructionStatement__CommandAssignment_0)
	{ after(grammarAccess.getConstructionStatementAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__1__Impl
	rule__ConstructionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getAtKeyword_1()); }
	'at'
	{ after(grammarAccess.getConstructionStatementAccess().getAtKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__2__Impl
	rule__ConstructionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getRowKeyword_2()); }
	'row:'
	{ after(grammarAccess.getConstructionStatementAccess().getRowKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__3__Impl
	rule__ConstructionStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getIntegersAssignment_3()); }
	(rule__ConstructionStatement__IntegersAssignment_3)
	{ after(grammarAccess.getConstructionStatementAccess().getIntegersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__4__Impl
	rule__ConstructionStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getConstructionStatementAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__5__Impl
	rule__ConstructionStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getColKeyword_5()); }
	'col:'
	{ after(grammarAccess.getConstructionStatementAccess().getColKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructionStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructionStatementAccess().getIntegersAssignment_6()); }
	(rule__ConstructionStatement__IntegersAssignment_6)
	{ after(grammarAccess.getConstructionStatementAccess().getIntegersAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegatedExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegatedExpression__Group__0__Impl
	rule__NegatedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegatedExpressionAccess().getNotKeyword_0()); }
	'not'
	{ after(grammarAccess.getNegatedExpressionAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegatedExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionAssignment_1()); }
	(rule__NegatedExpression__NegatedExpressionAssignment_1)
	{ after(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__0__Impl
	rule__BinaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBinaryExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__1__Impl
	rule__BinaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getLeftExpressionAssignment_1()); }
	(rule__BinaryExpression__LeftExpressionAssignment_1)
	{ after(grammarAccess.getBinaryExpressionAccess().getLeftExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__2__Impl
	rule__BinaryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_2()); }
	(rule__BinaryExpression__OperatorAssignment_2)
	{ after(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__3__Impl
	rule__BinaryExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getRightExpressionAssignment_3()); }
	(rule__BinaryExpression__RightExpressionAssignment_3)
	{ after(grammarAccess.getBinaryExpressionAccess().getRightExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBinaryExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeadingExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadingExpression__Group__0__Impl
	rule__HeadingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadingExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralAssignment_0()); }
	(rule__HeadingExpression__HeadingLiteralAssignment_0)
	{ after(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadingExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadingExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadingExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralAssignment_1()); }
	(rule__HeadingExpression__DirectionLiteralAssignment_1)
	{ after(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WallAheadExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAheadExpression__Group__0__Impl
	rule__WallAheadExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAheadExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadExpressionAccess().getWallAssignment_0()); }
	(rule__WallAheadExpression__WallAssignment_0)
	{ after(grammarAccess.getWallAheadExpressionAccess().getWallAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAheadExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAheadExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAheadExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadExpressionAccess().getAheadAssignment_1()); }
	(rule__WallAheadExpression__AheadAssignment_1)
	{ after(grammarAccess.getWallAheadExpressionAccess().getAheadAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
	()
	{ after(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringExpression__Group__0__Impl
	rule__StringExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringExpressionAccess().getStringExpressionAction_0()); }
	()
	{ after(grammarAccess.getStringExpressionAccess().getStringExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringExpressionAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
	{ after(grammarAccess.getStringExpressionAccess().getSTRINGTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getScriptAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__StatementsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getStatementsStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getScriptAccess().getStatementsStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getIfExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getIfExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Statements2Assignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getStatements2StatementParserRuleCall_4_2_0()); }
		ruleStatement
		{ after(grammarAccess.getIfStatementAccess().getStatements2StatementParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__WhileExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getWhileExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileStatementAccess().getWhileExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__IntegerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getIntegerIntegerParserRuleCall_1_0()); }
		ruleInteger
		{ after(grammarAccess.getRepeatStatementAccess().getIntegerIntegerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getRepeatStatementAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCommand__StringAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceCommandAccess().getStringStringExpressionParserRuleCall_1_0()); }
		ruleStringExpression
		{ after(grammarAccess.getTraceCommandAccess().getStringStringExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicCommand__LiteralAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicCommandAccess().getLiteralCommandLiteralEnumRuleCall_0()); }
		ruleCommandLiteral
		{ after(grammarAccess.getAtomicCommandAccess().getLiteralCommandLiteralEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructionStatementAccess().getCommandGridLiteralEnumRuleCall_0_0()); }
		ruleGridLiteral
		{ after(grammarAccess.getConstructionStatementAccess().getCommandGridLiteralEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__IntegersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructionStatementAccess().getIntegersIntegerParserRuleCall_3_0()); }
		ruleInteger
		{ after(grammarAccess.getConstructionStatementAccess().getIntegersIntegerParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructionStatement__IntegersAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructionStatementAccess().getIntegersIntegerParserRuleCall_6_0()); }
		ruleInteger
		{ after(grammarAccess.getConstructionStatementAccess().getIntegersIntegerParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__NegatedExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getNegatedExpressionAccess().getNegatedExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__LeftExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getLeftExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getBinaryExpressionAccess().getLeftExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__OperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getOperatorOperatorLiteralEnumRuleCall_2_0()); }
		ruleOperatorLiteral
		{ after(grammarAccess.getBinaryExpressionAccess().getOperatorOperatorLiteralEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__RightExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getRightExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getBinaryExpressionAccess().getRightExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadingExpression__HeadingLiteralAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralHeadingLiteralEnumRuleCall_0_0()); }
		ruleHeadingLiteral
		{ after(grammarAccess.getHeadingExpressionAccess().getHeadingLiteralHeadingLiteralEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadingExpression__DirectionLiteralAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralDirectionLiteralEnumRuleCall_1_0()); }
		ruleDirectionLiteral
		{ after(grammarAccess.getHeadingExpressionAccess().getDirectionLiteralDirectionLiteralEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAheadExpression__WallAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallAheadExpressionAccess().getWallWallLiteralEnumRuleCall_0_0()); }
		ruleWallLiteral
		{ after(grammarAccess.getWallAheadExpressionAccess().getWallWallLiteralEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAheadExpression__AheadAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallAheadExpressionAccess().getAheadAheadLiteralEnumRuleCall_1_0()); }
		ruleAheadLiteral
		{ after(grammarAccess.getWallAheadExpressionAccess().getAheadAheadLiteralEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalExpression__LiteralAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNormalExpressionAccess().getLiteralNormalExpressionLiteralEnumRuleCall_0()); }
		ruleNormalExpressionLiteral
		{ after(grammarAccess.getNormalExpressionAccess().getLiteralNormalExpressionLiteralEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
